import asyncio
import os
import json
import base64
import logging
import sys
import shutil

from io import BytesIO 
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.exceptions import BotBlocked
from aiogram.types import InputFile
from configparser import ConfigParser

from helper import number_to_emoji

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

sys.stdout.reconfigure(encoding='utf-8')

# Load configuration
config = ConfigParser()
config.read('config.ini')

if not config.has_section('Settings') or not config.has_option('Settings', 'MAIN_FOLDER'):
    logging.error("–°–µ–∫—Ü–∏—è [Settings] –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä MAIN_FOLDER –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ config.ini")
    raise ValueError("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ MAIN_FOLDER –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ config.ini")

MAIN_FOLDER = config.get('Settings', 'MAIN_FOLDER')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ–∫—Ü–∏–∏ 'Bot' –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'API_TOKEN'
if not config.has_section('Bot') or not config.has_option('Bot', 'API_TOKEN'):
    logging.error("–°–µ–∫—Ü–∏—è [Bot] –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ config.ini")
    raise ValueError("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ config.ini")

API_TOKEN = config.get('Bot', 'API_TOKEN')

# Initialize bot and dispatcher
bot = Bot(token="7710502164:AAFwCa1oYvmKqMlzd6kdxm-xaLDKojJR0dI")
dp = Dispatcher(bot)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ ids.txt
async def remove_establishments_folders():
    try:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å ID –∑–∞–≤–µ–¥–µ–Ω–∏–π
        ids_file = os.path.join(MAIN_FOLDER, 'ids', 'ids.txt')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ ids.txt
        if not os.path.exists(ids_file):
            logging.error(f"–§–∞–π–ª {ids_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ß–∏—Ç–∞–µ–º ID –∑–∞–≤–µ–¥–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
        with open(ids_file, 'r', encoding='utf-8') as f:
            establishment_ids = [line.strip() for line in f if line.strip()]

        logging.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–ø–æ–∫ –¥–ª—è {len(establishment_ids)} –∑–∞–≤–µ–¥–µ–Ω–∏–π.")

        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–π
        for establishment_id in establishment_ids:
            establishment_folder = os.path.join(MAIN_FOLDER, establishment_id)
            if os.path.exists(establishment_folder):
                try:
                    shutil.rmtree(establishment_folder)
                    logging.info(f"–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è {establishment_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è {establishment_id}: {e}")
            else:
                logging.warning(f"–ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è {establishment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª ids.txt
        with open(ids_file, 'w', encoding='utf-8') as f:
            f.write('')
        logging.info(f"–§–∞–π–ª {ids_file} –æ—á–∏—â–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–∞ ids.txt: {e}")

# Function to send messages
async def send_daily_reports():
    try:
        logging.info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤")
        ids_file = os.path.join(MAIN_FOLDER, 'ids', 'ids.txt')
        users_file = os.path.join(os.getcwd(), 'users.json')

        # Load user mappings
        if not os.path.exists(users_file):
            print(f"Users mapping file not found at {users_file}")
            return

        with open(users_file, 'r', encoding='utf-8') as uf:
            users_mapping = json.load(uf)  # This should be a dict {establishment_id: [user_id, ...]}
        logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users_mapping)} –∑–∞–ø–∏—Å–µ–π –∏–∑ users.json")
        # Read establishment IDs
        if not os.path.exists(ids_file):
            print(f"IDs file not found at {ids_file}")
            return

        with open(ids_file, 'r', encoding='utf-8') as f:
            establishment_ids = [line.strip() for line in f if line.strip()]

        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(establishment_ids)} –∑–∞–≤–µ–¥–µ–Ω–∏–π –≤ ids.txt")

        for establishment_id in establishment_ids:
            logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è ID: {establishment_id}")
            establishment_folder = os.path.join(MAIN_FOLDER, establishment_id)
            if not os.path.exists(establishment_folder):
                print(f"Folder for establishment {establishment_id} not found.")
                continue

            # Get the users to send messages to for this establishment
            user_ids = users_mapping.get(establishment_id, [])
            if not user_ids:
                print(f"No users to send messages to for establishment {establishment_id}")
                continue
            else:
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è {establishment_id}: {user_ids}")
            
            # Read stat.json
            stat_file = os.path.join(establishment_folder, 'stat.json')
            if not os.path.exists(stat_file):
                print(f"stat.json not found for {establishment_id}")
                continue

            with open(stat_file, 'r', encoding='utf-8') as sf:
                stat_data = json.load(sf)

            org_rate = stat_data.get('org_rate', 'N/A')
            org_name = stat_data.get('org_name', 'N/A')
            org_feedback = stat_data.get('org_feedback', 'No data')
            screenshot_base64 = stat_data.get('SCREENSHOT_PEREHOD_BY_YEAR', '')

           # Read concurrents.txt
            concurrents_file = os.path.join(establishment_folder, 'concurents.txt')
            if not os.path.exists(concurrents_file):
                print(f"concurents.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {establishment_id}")
                concurrents = []
            else:
                with open(concurrents_file, 'r', encoding='utf-8') as cf:
                    concurrents_lines = cf.read().splitlines()

                concurrents = []
                for cline in concurrents_lines:
                    cparts = cline.strip().split(':')
                    if len(cparts) != 4:
                        print(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ concurents.txt: {cline}")
                        continue
                    position, share, name, is_own = cparts
                    concurrents.append({
                        'position': position,
                        'share': share.strip(),
                        'name': name.strip(),
                        'is_own': is_own.strip() == 'True'
                    })

            # Build the message
            message_lines = []
            message_lines.append(f"üìç *{org_name}* üìç\n")
            today_str = datetime.now().strftime(" `%d.%m.%Y` \n")
            message_lines.append(today_str)

            rating_emoji = number_to_emoji(org_rate)
            message_lines.append(f"‚≠êÔ∏è _–†–µ–π—Ç–∏–Ω–≥:_ {rating_emoji}")
            message_lines.append(f"\nüìù _–û—Ç–∑—ã–≤—ã:_ {org_feedback}\n")

            message_lines.append("üë®‚Äçüë©‚Äçüë¶‚Äçüë¶ _–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:_")
            total_concurrents = len(concurrents)
            for idx, c in enumerate(concurrents, start=1):
                is_last = idx == total_concurrents
                prefix = '‚îî‚îÄ‚îÄ' if is_last else '‚îú‚îÄ‚îÄ'
                circle = 'üü¢' if c['is_own'] else 'üî¥'
                line = f"{prefix} {circle} {c['name']} ({c['share']})"
                message_lines.append(line)

            message_text = '\n'.join(message_lines)
            
            logging.info(f"message_text {message_text}")

            # Send the message to each user
            for user_id in user_ids:
                logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                try:
                    if screenshot_base64:
                        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ base64
                        image_data = base64.b64decode(screenshot_base64)
                        photo = InputFile(BytesIO(image_data), filename='screenshot.png')
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                        await bot.send_photo(chat_id=int(user_id), photo=photo, caption=message_text,
                        parse_mode='Markdown')
                    else:
                        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await bot.send_message(chat_id=int(user_id), text=message_text,
                        parse_mode='Markdown')
                except BotBlocked:
                    logging.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
    except Exception as err:
        print(f"Error: {err}")


# Schedule the daily task
# –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
async def scheduler():
    while True:
        now = datetime.now()
        next_run = now.replace(hour=11, minute=11, second=0, microsecond=0)
        if now >= next_run:
            next_run += timedelta(days=1)
        wait_seconds = (next_run - now).total_seconds()
        logging.info(f"–°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {next_run} (—á–µ—Ä–µ–∑ {wait_seconds} —Å–µ–∫—É–Ω–¥)")
        await asyncio.sleep(wait_seconds)
        await send_daily_reports()
        await remove_establishments_folders()


# Start polling and scheduler
async def main():
    logging.info(f"MAIN_FOLDER —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {MAIN_FOLDER}")
    asyncio.create_task(scheduler())
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())